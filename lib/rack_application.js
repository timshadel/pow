// Generated by CoffeeScript 1.3.3
(function() {
  var PooledApplication, RackApplication, bufferLines, join, nack,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PooledApplication = require('./pooled_application');

  nack = require('nack');

  join = require("path").join;

  bufferLines = require("./util").bufferLines;

  module.exports = RackApplication = (function(_super) {

    __extends(RackApplication, _super);

    function RackApplication() {
      RackApplication.__super__.constructor.apply(this, arguments);
      this.rackConfig = join(this.root, "config.ru");
    }

    RackApplication.prototype.createPool = function(options) {
      var _this = this;
      if (this.pool) {
        return this.pool;
      }
      console.log("RackApplication env:", options.env);
      this.pool = nack.createPool(this.rackConfig, options);
      bufferLines(this.pool.stdout, function(line) {
        return _this.logger.info(line);
      });
      bufferLines(this.pool.stderr, function(line) {
        return _this.logger.warning(line);
      });
      this.pool.on("worker:spawn", function(process) {
        return _this.logger.debug("nack worker " + process.child.pid + " spawned");
      });
      return this.pool.on("worker:exit", function(process) {
        return _this.logger.debug("nack worker exited");
      });
    };

    RackApplication.prototype.sendToPool = function(req, res, next, resume, callback) {
      var _this = this;
      req.proxyMetaVariables = {
        SERVER_PORT: this.configuration.dstPort.toString()
      };
      try {
        return this.pool.proxy(req, res, function(err) {
          if (err) {
            _this.quit();
          }
          return next(err);
        });
      } finally {
        resume();
        if (typeof callback === "function") {
          callback();
        }
      }
    };

    return RackApplication;

  })(PooledApplication);

}).call(this);
